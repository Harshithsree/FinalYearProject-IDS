from tkinter import *   
from random import *   
from time import *      
from math import *      
 

def onKeyDown(event):
    global lastkey, appOn
    lastkey = event.keysym
    if lastkey == "Escape" : appOn = False  
 
def onShutdown():
    global appOn
    appOn = False
 
win = Tk()                          
win.title('Chaos Spinner')         
win.geometry("640x480")             
win.state('zoomed')                 
win.config(bg="#000000")           
win.update()                        
winwid = win.winfo_width()         
winhei = win.winfo_height()
canv = Canvas(win, width = winwid, height = winhei, bg="black") 
canv.pack()                         
win.bind("<KeyPress>", onKeyDown)  
win.protocol("WM_DELETE_WINDOW",onShutdown) 
 
appOn = True                       
while appOn:                      
    lastkey = ""                    
    amount = randint(4,16)          
    total = 0                       
    angle = []                      
    dist = []
    rate = []
    x = []
    y = []
    angrng = randint(1,12) * 15     
    for i in range(0,amount):       
        angle.append(randint(-angrng,angrng)) 
        dist.append(randint(16,round((winhei/1.1)/amount))) 
        total = total + dist[i]     
        rate.append(randint(-10,10) * 2)  
    for i in range(0,amount):       
        rndpos = randint(0,amount-1)
        dist[rndpos] = dist[rndpos] + (((winhei / 1.1) - total) // amount)
    x.append(winwid // 2)          
    y.append(winhei // 2)
    for i in range(1,amount):      
        x.append(round(x[i-1]+dist[i]*cos(radians(angle[i]))))  
        y.append(round(y[i-1]+dist[i]*sin(radians(angle[i]))))
    x.append(x[amount-1])          
    y.append(y[amount-1])
 
    pen = 
    []                       
    for i in range(0,amount): pen.append(None)  #fill it with lots of nothing
    line = []                       #list to hold the connecting lines and point circles
    while appOn and lastkey != "space" and (time_ns() // 100000000) % 150 != 0 :  #while window is open, the space has not been pressed, and if seconds has not elapsed
        for i in range(1,amount):   #for each pen segment
            if pen[i] != None:      #Is there already a pen segment here?
                canv.delete(pen[i]) #delete the old pen segment
            angle[i] = angle[i]+rate[i]                                        #Calcualte the position of the new pen segment
            x[i] = x[i-1]+dist[i]*cos(radians(angle[i]))
            y[i] = y[i-1]+dist[i]*sin(radians(angle[i]))
            pen[i] = canv.create_line(x[i-1],y[i-1],x[i],y[i],fill="green")    #create the new pen segment
         
     
        color = ["#"+''.join([choice('ABCDEF0123456789') for i in range(6)])]  #choose a random color (random hex value)
        line.append(canv.create_line(x[amount-1],y[amount-1],x[amount],y[amount], fill=color))  #draw a line between the end of the pen, and the ends last location
        x[amount] = x[amount-1]                                                #update the end of the pen
        y[amount] = y[amount-1]
        line.append(canv.create_oval(x[amount-1]-3,y[amount-1]-3,x[amount-1]+3,y[amount-1]+3, outline=color))  #draw a circle at the end of the pen
        canv.update()                #update the window so the user can see the change
        sleep(0.025)                 #sleep for a tick to let other stuff happen in the OS
    for s in line: canv.delete(s)    #delete all of the connecting lines and circles
    for l in pen: canv.delete(l)     #delete the old pen
 
#once the window has been closed, clean up all of the resources and close the window.
win.destroy()